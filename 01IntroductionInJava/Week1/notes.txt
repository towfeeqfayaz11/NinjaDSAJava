# jre = (builtin java class library, packages) + jvm
# jdk = java development tools + jre

# javac (java compiler) is provided by jdk ("java development tools" to be specific)
# java (invking jvm to execute our byte code) is provided by jvm

# java source code ---> "compiler" ---> java byte code (.class file) ---> "jvm" ---> jvm converts it to machine code and executes 

## comments in java
// single line comment
/*
multi line
comment
*/

# to compile and generate byte code from a different directory
$ javac /home/MyJavaFile.java
# You can then run it by including /home on the classpath.
$ java -cp /home MyJavaFile

# If you want to generate the class file in a different directory then you can use the -d option with javac.
# Use the -d command line parameter with javac to tell it what directory you'd like to store the compiled 
# class files in. Then, to run the program, simply include this directory in the classpath:
$ javac -d some/directory myjavafile.java
$ java -cp some/directory myjavafile

# e.g;
$ pwd
/Users/towfeeq.fayaz/towfeeq/NinjaDSAJava
$ javac -d /tmp 1_IntroductionToJava/1_IntroToJava/HelloWorld.java
$ NinjaDSAJava java -cp /tmp HelloWorld                                        
Hello


# vscode extensions for java :-> "Extension pack for java"

# different types of integer in number system
  15               -> decimal 15
  017              -> octal (decimal 15)
  0B1111 / 0b1111  -> binary (decimal 15)
  0XF / 0xF        -> hexadecimal (decimal 15)


# in java we can do also;
  double  d = 1e-9;   0.1 * 10^-8

# for char data type, we can either give char literal or equivalent ascii value of char (java will internally convert the ascii to equivalent char)
# we can also assign the equivalent unicode value
  char c = 'a';      // same as below
  char d = 97;       // same as above
  char e = '\u0061'  // same as above