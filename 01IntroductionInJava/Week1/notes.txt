# jre = (builtin java class library, packages) + jvm
# jdk = java development tools(e.g compiler) + jre

# javac (java compiler) is provided by jdk ("java development tools" to be specific)
# java (invoking jvm to execute our byte code) is provided by jvm

# java source code ---> "compiler" ---> java byte code (.class file) ---> "jvm" ---> jvm converts it to machine code and executes 

## comments in java
// single line comment
/*
multi line
comment
*/

# to compile and generate byte code from a different directory
$ javac /home/MyJavaFile.java
# You can then run it by including /home on the classpath.
$ java -cp /home MyJavaFile

# If you want to generate the class file in a different directory then you can use the -d option with javac.
# Use the -d command line parameter with javac to tell it what directory you'd like to store the compiled 
# class files in. Then, to run the program, simply include this directory in the classpath:
$ javac -d some/directory myjavafile.java
$ java -cp some/directory myjavafile

# e.g;
$ pwd
/Users/towfeeq.fayaz/towfeeq/NinjaDSAJava
$ javac -d /tmp 1_IntroductionToJava/1_IntroToJava/HelloWorld.java
$ NinjaDSAJava java -cp /tmp HelloWorld                                        
Hello


# vscode extensions for java :-> "Extension pack for java"

# different types of integer in number system
  15               -> decimal 15
  017              -> octal (decimal 15)
  0B1111 / 0b1111  -> binary (decimal 15)
  0XF / 0xF        -> hexadecimal (decimal 15)


# in java we can do also;
  double  d = 1e-9;   0.1 * 10^-8

# for char data type, we can either give char literal or equivalent ascii value of char (java will internally convert the ascii to equivalent char)
# we can also assign the equivalent unicode value
  char c = 'a';      // same as below
  char d = 97;       // same as above
  char e = '\u0061'  // same as above


# A variable name can have upper/lower case characters, underscore(_), dollar($) and numbers (should not start with number)


# different data types
byte  -> 1 byte -> -128 to 127
short -> 2 byte -> -32768 to 32767
int   -> 4 byte -> -2147483648 to 2147483647
long  -> 8 byte -> -9223372036854775808 to 9223372036854775807 (to denote an integer literal of type long append L or l at the end)

float -> 4 bytes   (to denote a decimal literal of type float append F or f at the end) (precision to 5 decimal places)
double -> 8 bytes  (by default considers decimal as double)

char -> 2 bytes -> 0 to 65535

boolean -> (1 bit or 1 byte) -> true or false


# we can have different types of literals like integer literal, decimal literal etc;
  when we assign a literal to a variable, the java first assigns temporary memory to the literal 
  (whose size can change depending on literal type)

  e.g;   byte b = 11;    here 11 is an integer literal with temporary memory of 4 bytes
         short a  = 42;  here 42 is an integer literal with temporary memory of 4 bytes
         int i = 63;     here 63 is an integer literal with temporary memory of 4 bytes
         long l = 911L;  here 63 is an long literal with temporary memory of 8 bytes





byte b = 013;       // storing octal as deciaml
byte b = 0b1111;    // storing binary as decimal
byte b = 0xA;       // storing hexadecimal as decimal


double d = 0.1e8;    // 0.1 * 10^8
double d = 1e-8;     // 1 * 10^-8